<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[HEXO NEXT魔改记录]]></title>
    <url>%2F2019%2F06%2F16%2FHEXO-NEXT%E9%AD%94%E6%94%B9%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[前言为啥折腾博客？原来是看到1小时可以快速弄好一个免费博客的文章，然后入了坑。。。1小时，我连工具都没安装好。。。那些奇奇怪怪的问题实在太多了，对我这种代码0基础的人，非常难受。。。 而等弄完了，发现其实什么功能都没，各种样式也不好看，然后再慢慢Google开始慢慢魔改之路。。。天知道是经历了什么。。。（半路想换Wordpress的，但是Wordpress我也没搞过，谁知道风险是不是更大，还要买空间。再说弄到一半了，不如继续折腾HEXO。） 由于个人对博客的需求比较不同吧，许多基本的改动文章都不能满足我，我主要是拿来放作品、放文章，希望展示性更强，阅读体验更好。所以做了很多针对性的改动，以下是一些记录，不定期更新（emmm…有时间我在放对比图片吧…哈哈）： 一原版的阅读体验其实还OK，但还有不少欠缺的地方，我参考了一些比较成熟的博客类网站，类似medium、isux官网、知乎专栏等，对内容区域宽度、图片样式、引用样式、代码框样式、分割线样式、文章内链接样式做了调整，还有标题、正文、各层级的小标题的字号、字宽、字体颜色、行距、段距等等，都做了调整。对小屏、宽屏、移动端，都做了不同设置。这部分断断续续的花了不少时间。我对网页的中文字体使用没什么研究，所以字体暂时没改。（使用特殊字体引起的行高问题，混排问题貌似比较复杂，还是用系统字体保险点） 二增加了addthis，并把原来的侧边栏悬浮按钮和返回顶部悬浮按钮的样式做了调整，统一样式，突出了个人头像。增加tidio留言功能，评论功能暂时还没去找，先用着留言先了。 三侧边栏做了很多细节调整，原来的有点乱，主次不分。从宽度、头像大小、字体大小、间距、链接样式等，做了调整，区分了下主次和间隔。另外我还不知道怎么改动他们的顺序，怎么添加内容进去，所以暂时没再做大的改动了。 四底部版权内容做了弱化，无用的信息删掉了。 五顶部栏做了调整，去掉图标，等logo做好后面再换上去。 六一些功能性的有的没的功能的加入，打赏、关注公众号、阅读统计（貌似有问题，还没去弄好） 七使用了云图库方式，用了腾讯cos放图片。用了个picgo的小工具传图。 八写作方面，增加了支持emoji的功能；现在是用简书的markdown写，写完再粘贴到博客里。 下一步准备做的改动 我的博客链接：Say Something document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
  <entry>
    <title><![CDATA[直播动画用的SVGA文件是什么？]]></title>
    <url>%2F2019%2F06%2F04%2Fsvga01-0%2F</url>
    <content type="text"><![CDATA[前言从动效设计到开发实现中，总会遇到很多问题。我们导出各种格式来适应不同需求，但总是无法完美还原。要么文件太大，要么帧率低，要么颜色还原有问题，要么平台不支持，要么性能有问题，要么标注复杂动效非常麻烦…… ✨SVGA✨是一个比较靠谱的解决方案，设计师只要把动效导出SVGA就完成输出，并很好的解决以上痛点。 工作中对SVGA的接触比多，小结了一篇科普向的面向初学者的文章。 一、SVGA是什么？ 这是SVGA实现的动画效果 设计师完成动效设计后，输出的方式千千万万，例如最常见的png序列帧；把png序列帧合并到一起的apng、webp、gif；视频格式；Dragonbones、Spine、Deep Motion Creature导出的动画资源（一般是jason格式 ）等等。 而SVGA算是其中一种方式。 SVGA是YY（欢聚时代）开发的一种动效实现解决方案。SVGA在github上的内容 对前端工程师来说，这是支持iOS、Android、web三端播放、开发简单、性能好，对设计师来说，这是支持Ae、An制作导出，性能好、学习成本低的比较完善的方案。和上面其他格式的比较，后面会提到。 直接解压一个SVGA 1.0的文件可以知道他的大概原理： 把SVGA 1.0的文件后缀改成zip，解压就会得到图片文件和movie.spec文件 用记事本打开movie.spec，会看到很多代码 压缩包里的图片，是动画素材，而动画的信息，保存在movie.spec文件里。 SVGA，是把动画用代码的方式记录了下来，打包成一个文件，然后放到各端的播放器上播出来。当然同时这也决定了，An、Ae里的滤镜、效果，要支持比较困难，因为代码能记录的动画是比较有限的。 二、SVGA的优势是什么？常见的动效实现方式： 从动画质量、播放性能、文件大小、使用成本几个角度来看这些方式： 视频类：帧率高，色彩还原好；文件大导致加载慢，占内存多，带透明通道视频文件巨大。 序列帧类：GIF存在色差，没半透明通道；压缩的png序列类也会有色差。文件大导致加载慢，占内存多；为了文件小一般都用低帧率（一般10-15帧），牺牲帧率； 平台类：输出的是资源图和动画数据，所以帧率高，色彩还原好；文件小；对内存和CPU占用都相对小；但是存在成本问题，设计师需要另外学习软件，开发需要接入搭建平台，学习和使用成本相对高；而且不一定适合直播； 手写类：手写类动画质量、播放性能、文件大小和平台类一样，都很理想，只是也存在成本问题。设计师不能直接输出动画文件给开发用，需要做标注，然后开发按标注写动画，使用成本高； 一个简单的提醒动效的标注 SVGA：其实类似于平台类，只是需要接入的不是一个复杂庞大的系统，仅仅是一个播放器；设计师也不用另外学软件； 更直观点的就是打个分： 实现方案 动画质量 播放性能 文件小 低成本 得分 视频类 5 1 1 5 12 序列帧类 3 3 2 5 13 平台类 5 5 3 1 14 手写类 5 5 3 1 14 SVGA 5 5 3 4 17 可以看到，SVGA评分达到最高的17分。实际使用，不同的使用场景下会有不同的需求。直播间礼物动效，SVGA无疑是最适合的。 下面是一些自己的理解，这里也许偏技术一点，但是原理很简单，有兴趣可以看看： PS: SVGA记录动画数据的特点 这是一个缓动位移动画 分解这个动画的实际各参数 SVGA记录动画数据的特点，也是他的性能表现好的原因之一。对比两种记录动画参数的方式，用文字描述可以翻译成：方式一： 1图片.png，在0ms，xy:0,0；在800ms，xy:80,80；缓动函数是xxx 方式二： 12图片.png，在0ms，xy:0,0；在100ms，xy:15,15；在200ms，xy:30,30；在300ms，xy:45,45；在400ms，xy:50,50；...... 在800ms，xy:80,80； 😑 不要被代码吓到…其实就是，方式一只记录每个关键帧的数据方式二记录每一帧的数据 上面提到SVGA中的movie.spec文件，使用的是方式二。 方式二的优点：性能更好：客户端播放器只需读取和显示每一帧里，图片资源的动画属性（位置、透明度、缩放等信息）不需要解析计算缓动动画等。而方式一会把缓动的解析的计算量给到播放器端去实现，播放器端就需要消耗更多计算量，性能消耗大。 方式二的缺点：数据量多：如果时长太长，帧数多，数据就多。时长太长的动画，加载会花多点时间。帧数固定：这个也不能说是缺点吧。方式一，理论上帧率随实际环境决定，不是由输出的文件决定。而方式二由于是按帧来记录，所以帧率固定为输出时的设定。 💡 也就是说，SVGA文件适合时长较短的动画，时长太长可以考虑分成几个SVGA来制作。而直播间里的动效，一般8秒以内，最适合SVGA。 SVGA和Lottie另外提一下另一种类似SVGA的方案–Lottie。Lottie是用方式一来记录动画。我对Lottie了解不多，我的理解是性能比SVGA差点，对矢量的支持好点。这里不展开，更多信息参考链接：lottie官网Github上的lotte PS: 关于播放性能、文件大小如图，动画复杂，占用的是CPU；文件过大，占用的是内存；解码复杂，占用的是CPU；文件大，占带宽、下载慢。 当然了，这个过程实际会复杂很多，不同系统为了性能最优化也会有不同的策略，这种只是简单的说明。 例如：序列帧类文件大就下载慢、占内存，但不那么耗CPU；粒子动画耗CPU，但不占内存，下载快；SVGA和手写类，总体来讲性能很好，如果动画过于复杂矢量元素多也会耗CPU，占内存但比序列帧类少；等等… 总结一下： 强大的设计工具支持； 支持多平台； 性能表现更好； 学习成本、使用成本低； 支持动态替换资源图； 等等… 三、SVGA动效实现小技巧SVGA适合广泛使用在很多地方，UI图标动效上、直播大礼物动效上、甚至游戏动效，不同的场景使用需求会很不同。先附上基本操作文档：[SVGA 设计使用指南][4] ，下面是讲SVGA在设计中的一些使用小技巧，希望可以不同场景下的使用给大家带来一些灵感。 1.图片key替换文字SVGA中不支持文字，需要把文字转成图片或矢量图形。像用户名这种需要开发那边来控制显示的内容，曲线救国的方式就是，使用图片key的方式让开发动态替换。只需要把文字区域用透明png代替就行。 2. 替换图片的使用和第1点一样，所有图片都可以作为key来动态替换，替换成图片或文字。我们可以用这个功能做很多事情，例如：用户头像、勋章之类不同情况显示不同图片；多个状态的动画放在一个动效里，显示哪个状态的动画，开发通过控制图片key来实现；游戏中角色皮肤和装备等换装效果，可以这种方式简单实现。等等… 3. 矢量蒙版的使用蒙版遮罩的支持，可以让动画在一个区域内播放。例如冰块里烟雾效果。 例如可以做复杂的颜色变化的球。 😏 还可以做些骚操作例如当前屏幕碎裂效果： 做好的屏幕碎裂，屏幕的资源图用图片key，让开发替换成当前界面截屏。当效果出现时开发先做截屏，然后截屏的图作为图片key的替换图出现在动画里。（播放前截图获取截图资源图+矢量蒙版+图片替换） 4. 图片蒙版的使用解决蒙版衔接处的问题，羽化一个图片的方式例如可以实现类似极光的效果https://huaban.com/pins/2489028235/ 5. 开发可以控制播放哪一帧这样可以灵活的在不同情况下播放不同的动画。例如可以把动画分成几个部分，不同情况播放不同部分。例如特殊造型的进度条，有时候开发做蒙版比较麻烦的话，可以直接给个100帧SVGA，让开发加载百分比，播对应百分比帧。 6. 支持简单的矢量动画。常见的图形动画都可以做了。至于复杂的，就尽量少用。 7.输出优化一套动效里，同样的图片在多个SVGA动效里重复出现，能不能让他们共用一套图片减少实际图片量呢？可以考虑①这些动效做在一个SVGA里面，连续播放，然后开发根据需要控制播放哪部分帧。②把重复的图片用图片替换方式，多个SVGA都调用一套图片。（当然了这些方式开发那边都有工作量，需要先沟通好） 8. 👻其他一些奇技淫巧很多人会觉得SVGA的动画制作限制很多，其实这种方式类似于2d游戏动画制作（除了扭曲变形、蒙皮动画不支持），所以有些在2D游戏动画中适用的小技巧，也适合用在SVGA动效制作中：重复图片做水底图加颜色错位做故障效果（图）描边独立一套描边层（图）伪3d（图） 参考链接：SVGA官网[SVGA网页播放器]SVGA在github上的内容 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
</search>
