<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[闲谈动画01情感]]></title>
    <url>%2F2019%2F06%2F22%2F%E5%85%B3%E4%BA%8E%E5%8A%A8%E7%94%BB%E7%9A%84%E7%82%B9%E6%BB%B401%E6%83%85%E6%84%9F%2F</url>
    <content type="text"><![CDATA[动画相对于UI来说，是多了很多感情色彩。 UI、交互之类，思考各种逻辑，各种目的目标，各种引导用户，各种使用流程等，而动画有时候会需要很多具有感情色彩的东西，让动画更生动有趣，更好表达想表达的。 动画的表现力，遵循一些运动原理（加速度、惯性、形变、弹力、节奏），通过氛围的营造程度和情绪、情感的表达程度，来体现的。 氛围营造，是传达一种情感，让用户去感受；情绪、情感的表达，是表现事物的本身的情感。 不同的运动节奏和运动的方式，会让氛围的营造和情绪情感的表达得到很大的提升。 角色的动画，当角色处在情绪中时，角色的动作、表情都会受情绪影响，迟疑、犹豫、惊呆、颤抖、呼吸节奏、情绪逐步递进，动作和节奏就都不同了。 《人工智能》里，AI小男孩，为什么一开始可以简单分辨出他是机器人，就算外貌完全是人类样子？其实就是表情动作的问题。或者说，动作的目的性强、简单直接没有多余的动作，没有情感，让他看起来非人类。但是拥有情感后的AI小男孩，已经比较难区分是不是机器人了，因为他的动作表情已经受到情感和情绪的影响，看起来就更像人类了。这只是电影，我只是想说受情绪情感影响的表情动作才更有人味。 情绪是情感的表现之一，角色的情绪表达，人物的情绪是不会突然出现的，情绪出现的节奏，变化，是有一个心理变化流程的。也许可以用起-承-转-合来形容，然后这个变化过程用合适的细节元素来表现。什么地方先动，按什么原理动；什么后动，要卡什么节奏点才更有感觉。这个节奏处理的好才能让动画更生动。 总之就是让角色变成戏精，通过调整节奏和加戏，让动画变的很有趣。 （加入表情包来说明） 所以设计的时候经常要想象自己处在那个情绪或场景下会怎么做，是什么样的节奏，体验那个情绪，很有意思。 没错，自己慢慢会变成戏精的。。。 这个也是动画的魅力之一。]]></content>
  </entry>
  <entry>
    <title><![CDATA[HEXO NEXT魔改记录]]></title>
    <url>%2F2019%2F06%2F16%2FHEXO-NEXT%E9%AD%94%E6%94%B9%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[前言为啥折腾博客？原来是看到1小时可以快速弄好一个免费博客的文章，然后入了坑。。。1小时，我连工具都没安装好。。。那些奇奇怪怪的问题实在太多了，对我这种代码0基础的人，非常难受。。。 而等弄完了，发现其实什么功能都没，各种样式也不好看，然后再慢慢Google开始慢慢魔改之路。。。天知道是经历了什么。。。（半路想换Wordpress的，但是Wordpress我也没搞过，谁知道风险是不是更大，还要买空间。再说弄到一半了，不如继续折腾HEXO。） 由于个人对博客的需求比较不同吧，许多基本的改动文章都不能满足我，我主要是拿来放作品、放文章，希望展示性更强，阅读体验更好。所以做了很多针对性的改动，以下是一些记录，不定期更新（emmm…有时间我在放对比图片吧…哈哈）： 一原版的阅读体验其实还OK，但还有不少欠缺的地方，我参考了一些比较成熟的博客类网站，类似medium、isux官网、知乎专栏等，对内容区域宽度、图片样式、引用样式、代码框样式、分割线样式、文章内链接样式做了调整，还有标题、正文、各层级的小标题的字号、字宽、字体颜色、行距、段距等等，都做了调整。对小屏、宽屏、移动端，都做了不同设置。这部分断断续续的花了不少时间。我对网页的中文字体使用没什么研究，所以字体暂时没改。（使用特殊字体引起的行高问题，混排问题貌似比较复杂，还是用系统字体保险点） 二增加了addthis，并把原来的侧边栏悬浮按钮和返回顶部悬浮按钮的样式做了调整，统一样式，突出了个人头像。 三侧边栏做了很多细节调整，原来的有点乱，主次不分。从宽度、头像大小、字体大小、间距、链接样式等，做了调整，区分了下主次和间隔。另外我还不知道怎么改动他们的顺序，怎么添加内容进去，所以暂时没再做大的改动了。 四底部版权内容做了弱化，无用的信息删掉了。 五顶部栏做了调整，去掉图标，等logo做好后面再换上去。 六一些功能性的有的没的功能的加入，打赏、关注公众号、阅读统计、评论系统、 七使用了云图库方式，用了腾讯cos，用来放图片。 下一步准备做的改动 我的博客链接：Say Something]]></content>
  </entry>
  <entry>
    <title><![CDATA[关于SVGA（一）]]></title>
    <url>%2F2019%2F06%2F04%2Fsvga01-0%2F</url>
    <content type="text"><![CDATA[前言从动效设计到开发实现中，总会遇到很多问题。我们导出各种格式来适应不同需求，但总是无法完美还原。要么文件太大，要么帧率低，要么颜色还原有问题，要么平台不支持，要么性能有问题……SVGA是一个比较靠谱的解决方案，从设计软件导出到移动、web、PC，3端一条龙全支持，动效实现利器。工作中对SVGA的接触比多，小结了一篇科普向的面向初学者的文章，希望让你对SVGA有一定了解。 一、SVGA是啥？ 这是SVGA实现的动画效果 设计师完成动效设计后，输出的方式千千万万，例如最常见的png序列帧；把png序列帧合并到一起的apng、webp、gif；视频格式；Dragonbones、Spine、Deep Motion Creature导出的动画资源（一般是jason格式 ）等等。 而SVGA算是其中一种方式。 SVGA是yy（欢聚时代）开发的一种动效实现解决方案。SVGA在github。对前端工程师来说，这是支持iOS、Android、web三端播放，对设计师来说，这是支持Ae、An制作导出，性能好、学习成本低的比较完善的方案。和上面其他格式的比较，后面会提到。 直接解压一个SVGA 1.0的文件你会知道他的大概原理： 把SVGA 1.0的文件后缀改成zip，解压就会得到图片文件和movie.spec文件 用记事本打开movie.spec，会看到很多代码 压缩包里，没有序列帧，没有swf。里面的图片，是动画素材，而动画的信息，就是用movie.spec记录下来。换句话说，SVGA，是把动画用代码的方式记录了下来，打包成一个文件，然后放到各端的播放器上播出来。(这就导致，An、Ae里的滤镜、效果，要支持比较困难，因为代码能记录的动画是比较有限的。) 设计师使用SVGA，可以参考这个[SVGA 设计使用指南][4] 二、SVGA记录动画数据的特点（数据特点这个可能要后面说，顺序梳理下，这部分感觉一般人比较难懂点） 这是一个缓动位移动画 这个缓动位移动画的标注 一般动画，常见的可以用两种方式来记录动画数据，用文字描述可以翻译成： 记录方式一，记录关键帧动画：1图片.png，在0ms，xy:0,0；在800ms，xy:80,80；缓动函数是xxx 记录方式二，记录每帧的动画数据：12图片.png，在0ms，xy:0,0；在100ms，xy:15,15；在200ms，xy:30,30；在300ms，xy:45,45；在400ms，xy:50,50；...... 在800ms，xy:80,80； 方式一类似AE的显示，有每个关键帧的数据。方式二是记录每一帧的数据，相当于所有帧都k帧，记录下所有帧的数据。 SVGA使用的是方式二。 可以看出方式一的数据量更少，但是方式二的好处，是播放器端（就是客户端），不用再去解析这些动画，只需要读取和显示每一帧里，图片资源的动画属性（位置、透明度、缩放等信息）。特别是有缓动的动画，方式一会把缓动的解析的计算量给到播放器端去实现，播放器端就需要消耗更多计算量，性能消耗大。而方式二没有这个问题，方式二性能会好点的。 当然也有缺点，就是如果时长太长，帧数多，数据就非常多。之前做猫的动效的时候，时长太长的SVGA加载巨慢，可能就是因为帧数过多导致。也就是说，SVGA文件适合时长较短的动画，时长太长可以考虑分成几个SVGA来制作。而直播间里的动效，一般8秒以内，最适合SVGA。 方式一的另一个特点，理论上帧率随实际环境决定，不是由输出的文件决定。开发可以设定在环境中以多少帧率播放，理想情况按播放器支持的最高帧率播放。而方式二只能以输出时候设定的帧率进行播放。 SVGA和LottieLottie就是用方式一来记录动画。目前来说，简单理解就是性能比SVGA差点，对矢量的支持好点。这里不展开，更多信息参考链接：lottie官网Github上的lotte 三、SVGA的优势是什么？常见的动效实现方式： 分成几个角度来看这些方案： 动画质量：颜色还原、帧率。GIF稍微色差、没有半透明通道。 播放性能：复杂的动画会更卡，视频也比较耗性能。（见附图一） 文件大小：文件大，从服务器下载文件会花更多时间，播放时占用设备内存也更大。 使用成本：平台类需要接入平台、和SVGA一样动画制作不能用滤镜等。 手写类需要设计师提供具体的动效标注。 PS: 关于播放性能、文件大小如图，动画复杂，占用的是CPU；文件过大，占用的是内存；解码复杂，占用的是CPU；文件大下载慢。 如果比喻成拼乐高：①把乐高拿到手上，就是加载到内存，承载物品的是内存；②有不同的拼乐高方式，就是CPU对文件的解码过程；③需要用到特定工具来拼，就是需要格式支持的工具，例如客户端需要添加SVGA播放器；④拼的过程，就是CPU通过各种计算完成对信息的处理；⑤拼好后再把乐高放到某个位置上，就是将内存里的东西放到GPU显示。当然了，这个过程实际会复杂很多，不同系统为了性能最优化也会有不同的策略，这种只是简单的说明。 简言之，文件大小和动画数量和复杂程度，还有矢量的使用，都会影响到性能。有一个时间和空间的说法，内存是空间，CPU运行效率是时间，例如：序列帧不占用CPU，占用内存，是牺牲空间换时间；粒子效果，占用CPU不占用内存，是牺牲时间换空间。 PS: 关于开发手写动效的设计成本让开发手写动效，暂时没找到工具可以导出这些动效数据，需要设计师手工标注。一旦动效复杂，量大的时候，这个工作量就非常大。 一个简单的提醒动效的标注 我们可以基于以上来评分： 实现方案 动画质量 播放性能 文件小 低成本 得分 视频类 5 1 1 5 12 序列帧类 3 3 2 5 13 平台类 5 5 3 1 14 手写类 5 5 3 1 14 SVGA 5 5 3 4 17 可以看到，SVGA评分达到最高的17分。当然了，不同的使用场景下会有不同的考虑。在直播间礼物动效的角度，SVGA无疑是最适合的。 总结一下： 强大的设计工具支持； 支持多平台； 性能表现更好； 学习成本、使用成本低； 四、SVGA设计表现力SVGA适合广泛使用在很多地方，UI图标动效上、直播大礼物动效上、甚至游戏动效，不同的场景使用需求会很不同。下面是讲SVGA在设计中的一些使用小技巧，希望可以不同场景下的使用给大家带来一些灵感。 1.图片key替换文字SVGA中不支持文字，需要把文字转成图片。如果是让开发那边可控制的文字，曲线救国的方式就是，使用图片key的方式让开发动态替换。 2. 替换图片的使用动效中的所有图片都可以作为key来动态替换，替换成图片或文字。我们可以用这个功能做很多事情，例如控制显示和不显示某个动画、多个状态的动画一起播放、皮肤和装备可替换效果，可以用一个svga文件来实现。 3. 矢量蒙版的使用蒙版遮罩的支持，可以让动画在一个区域内播放。例如冰块里烟雾效果。例如可以做复杂的颜色变化的球。还可以做些骚操作，例如屏幕碎裂，做好的屏幕碎裂，屏幕的资源图用图片key，让开发替换成当前界面截屏（播放前截图获取截图资源图+矢量蒙版+图片替换），当效果出现时开发先做截屏，然后截屏的图作为图片key的替换图出现在动画里。（狼爪图） 4. 图片蒙版的使用解决蒙版衔接处的问题，羽化一个图片的方式，极光效果https://huaban.com/pins/2489028235/， 5. 开发可以控制播放哪一帧这样可以灵活的在不同情况下播放不同的动画。例如可以把动画分成几个部分，不同情况播放不同部分。例如特殊造型的进度条，有时候开发做蒙版比较麻烦的话，可以直接给个100帧SVGA，让开发加载百分比，播对应百分比帧。 6. 支持简单的矢量动画。常见的图形动画都可以做了。至于复杂的，就尽量少用。 7.其他一些奇技淫巧很多人会觉得SVGA的动画制作限制很多，其实这种方式类似于2d游戏动画制作（除了扭曲变形、蒙皮动画不支持），所以有些在2D游戏动画中适用的小技巧，也适合用在SVGA动效制作中：重复图片做水底图加颜色错位做故障效果（图）描边独立一套描边层（图）伪3d（图）]]></content>
  </entry>
</search>
